<?xml version="1.0"?>

<!-- *****************  Do not edit  ***************** -->
<!-- Generated by VisualLangLab (http://vll.java.net/) -->
<!-- *****************  Do not edit  ***************** -->
<VLL-Grammar>
  <Tokens>
    <Literal Name="&quot;,&quot;" Pattern="," />
    <Literal Name="&quot;are&quot;" Pattern="are" />
    <Literal Name="&quot;contributions&quot;" Pattern="contributions" />
    <Literal Name="&quot;currency&quot;" Pattern="currency" />
    <Literal Name="&quot;deductions&quot;" Pattern="deductions" />
    <Literal Name="&quot;employee&quot;" Pattern="employee" />
    <Literal Name="&quot;federal&quot;" Pattern="federal" />
    <Literal Name="&quot;for&quot;" Pattern="for" />
    <Literal Name="&quot;fund&quot;" Pattern="fund" />
    <Literal Name="&quot;gross&quot;" Pattern="gross" />
    <Literal Name="&quot;in&quot;" Pattern="in" />
    <Literal Name="&quot;income&quot;" Pattern="income" />
    <Literal Name="&quot;insurance&quot;" Pattern="insurance" />
    <Literal Name="&quot;is&quot;" Pattern="is" />
    <Literal Name="&quot;minus&quot;" Pattern="minus" />
    <Literal Name="&quot;of&quot;" Pattern="of" />
    <Literal Name="&quot;paycheck&quot;" Pattern="paycheck" />
    <Literal Name="&quot;percent&quot;" Pattern="percent" />
    <Literal Name="&quot;premiums&quot;" Pattern="premiums" />
    <Literal Name="&quot;retirement&quot;" Pattern="retirement" />
    <Literal Name="&quot;salary&quot;" Pattern="salary" />
    <Literal Name="&quot;state&quot;" Pattern="state" />
    <Literal Name="&quot;tax&quot;" Pattern="tax" />
    <Literal Name="&quot;{&quot;" Pattern="{" />
    <Literal Name="&quot;}&quot;" Pattern="}" />
    <Regex Name="DAYS" Pattern="days?" />
    <Regex Name="WEEKS" Pattern="weeks?" />
    <Regex Name="decimalNumber_" Pattern="(\\d+(\\.\\d*)?|\\d*\\.\\d+)" />
    <Regex Name="floatingPointNumber_" Pattern="-?(\\d+(\\.\\d*)?|\\d*\\.\\d+)([eE][+-]?\\d+)?[fFdD]?" />
    <Regex Name="ident_" Pattern="[a-zA-Z_]\\w*" />
    <Regex Name="stringLiteral_" Pattern="\&quot;([^\&quot;\\p{Cntrl}\\\\]|\\[\\/bfnrt]|\\\\u[a-fA-F0-9]{4})*\&quot;" />
    <Regex Name="wholeNumber_" Pattern="-?\\d+" />
  </Tokens>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Parsers>
    <Parser Name="Paycheck" >
      <Sequence >
        <Reference Ref="empl" />
        <Reference Ref="gross" />
        <Reference Ref="deduct" />
      </Sequence>
    </Parser>
    <Parser Name="PaycheckTester" >
      <Reference Ref="Paycheck" ActionText="function (arg) {&#xA;  if (arg === null) {&#xA;//****************************************&#xA;//          SETUP actions&#xA;//****************************************&#xA;  // global variables and functions ...&#xA;    VLL = {};&#xA;    VLL.grossSalary = 500.0&#xA;    VLL.salaryForDays = function (days) {&#xA;      return VLL.grossSalary * days;&#xA;    }&#xA;  // Input text for parser ...&#xA;    vllParserTestInput.setText(&#xA;      &quot;paycheck for employee \&quot;Buck Trends\&quot;\n&quot; +&#xA;      &quot;is salary for 2 weeks minus deductions for {\n&quot; +&#xA;      &quot;  federal income tax is 25. percent of gross,\n&quot; +&#xA;      &quot;  state income tax is 5. percent of gross,\n&quot; +&#xA;      &quot;  insurance premiums are 500. in gross currency,\n&quot; +&#xA;      &quot;  retirement fund contributions are 10. percent of gross\n&quot; +&#xA;      &quot;}&quot;&#xA;    )&#xA;  } else {&#xA;//****************************************&#xA;//          TEST actions&#xA;//****************************************&#xA;    if (arg.length === 3) {&#xA;      var error = &quot;&quot;&#xA;      var empl = arg[0];&#xA;      if (!empl.equals(&quot;Buck Trends&quot;)) {&#xA;        error += &quot;BAD empl (&quot; + empl + &quot;), &quot;;&#xA;      }&#xA;      var gross = arg[1].doubleValue();&#xA;      if (gross !== 5000) {&#xA;        error += &quot;BAD gross (&quot; + gross + &quot;), &quot;;&#xA;      }&#xA;      var deduct = arg[2].doubleValue();&#xA;      if (deduct !== 2500) {&#xA;        error += &quot;BAD deduct (&quot; + deduct + &quot;), &quot;;&#xA;      }&#xA;      if (error === &quot;&quot;) {&#xA;        return &quot;OK&quot;;&#xA;      } else {&#xA;        return error;&#xA;      }&#xA;    } else {&#xA;      return &quot;BAD AST structure&quot;;&#xA;    }&#xA;  }&#xA;}" />
    </Parser>
    <Parser Name="amount" >
      <Sequence >
        <Reference Ref="toBe" Drop="true" />
        <Reference Ref="doubleNumber" />
        <Token Ref="&quot;in&quot;" Drop="true" />
        <Token Ref="&quot;gross&quot;" Drop="true" />
        <Token Ref="&quot;currency&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="days" >
      <Token Ref="DAYS" ActionText="function (a) {&#xA;  if (a) {&#xA;    return 1;&#xA;  }&#xA;}" />
    </Parser>
    <Parser Name="deduct" >
      <Sequence >
        <Token Ref="&quot;minus&quot;" Drop="true" />
        <Token Ref="&quot;deductions&quot;" Drop="true" />
        <Token Ref="&quot;for&quot;" Drop="true" />
        <Token Ref="&quot;{&quot;" Drop="true" />
        <Reference Ref="deductItems" />
        <Token Ref="&quot;}&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="deductAmount" >
      <Choice ActionText="function (d) {&#xA;  if (d) {&#xA;    return d[1];&#xA;  }&#xA;}" >
        <Reference Ref="percentage" />
        <Reference Ref="amount" />
      </Choice>
    </Parser>
    <Parser Name="deductItem" >
      <Sequence >
        <Reference Ref="deductKind" Drop="true" />
        <Reference Ref="deductAmount" />
      </Sequence>
    </Parser>
    <Parser Name="deductItems" >
      <RepSep Mult="*" ActionText="function (a) {&#xA;  if (a !== null) {&#xA;    var total = 0;&#xA;    for (var i = 0; i &lt; a.size(); ++i) {&#xA;      total += a.get(i).doubleValue();&#xA;    }&#xA;    return total;&#xA;  }&#xA;}" >
        <Reference Ref="deductItem" />
        <Token Ref="&quot;,&quot;" />
      </RepSep>
    </Parser>
    <Parser Name="deductKind" >
      <Choice >
        <Reference Ref="tax" />
        <Reference Ref="insurance" />
        <Reference Ref="retirement" />
      </Choice>
    </Parser>
    <Parser Name="doubleNumber" >
      <Token Ref="floatingPointNumber_" ActionText="function (a) {&#xA;  if (a) {&#xA;    return parseFloat(a);&#xA;  } &#xA;}" />
    </Parser>
    <Parser Name="duration" >
      <Sequence ActionText="function (a) {&#xA;  if (a) {&#xA;    return parseFloat(a[0]) * a[1].doubleValue();&#xA;  }&#xA;}" >
        <Token Ref="decimalNumber_" />
        <Reference Ref="weekDays" />
      </Sequence>
    </Parser>
    <Parser Name="empl" >
      <Sequence >
        <Token Ref="&quot;paycheck&quot;" Drop="true" />
        <Token Ref="&quot;for&quot;" Drop="true" />
        <Token Ref="&quot;employee&quot;" Drop="true" />
        <Reference Ref="employeeName" />
      </Sequence>
    </Parser>
    <Parser Name="employeeName" >
      <Token Ref="stringLiteral_" ActionText="function (a) {&#xA;  if (a) {&#xA;    return a.substring(1, a.length - 1);&#xA;  }&#xA;}" />
    </Parser>
    <Parser Name="fedState" >
      <Choice >
        <Token Ref="&quot;federal&quot;" />
        <Token Ref="&quot;state&quot;" />
      </Choice>
    </Parser>
    <Parser Name="gross" >
      <Sequence ActionText="function (a) {&#xA;  if (a !== null) {&#xA;    VLL.grossAmount = VLL.salaryForDays(a)&#xA;    return VLL.grossAmount;&#xA;  }&#xA;}" >
        <Token Ref="&quot;is&quot;" Drop="true" />
        <Token Ref="&quot;salary&quot;" Drop="true" />
        <Token Ref="&quot;for&quot;" Drop="true" />
        <Reference Ref="duration" />
      </Sequence>
    </Parser>
    <Parser Name="insurance" >
      <Sequence >
        <Token Ref="&quot;insurance&quot;" Drop="true" />
        <Token Ref="&quot;premiums&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="percentage" >
      <Sequence ActionText="function (arg) {&#xA;  if (arg !== null) {&#xA;    return VLL.grossAmount * (arg / 100);&#xA;  }&#xA;}" >
        <Reference Ref="toBe" Drop="true" />
        <Reference Ref="doubleNumber" />
        <Token Ref="&quot;percent&quot;" Drop="true" />
        <Token Ref="&quot;of&quot;" Drop="true" />
        <Token Ref="&quot;gross&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="retirement" >
      <Sequence >
        <Token Ref="&quot;retirement&quot;" Drop="true" />
        <Token Ref="&quot;fund&quot;" Drop="true" />
        <Token Ref="&quot;contributions&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="tax" >
      <Sequence >
        <Reference Ref="fedState" Drop="true" />
        <Token Ref="&quot;income&quot;" Drop="true" />
        <Token Ref="&quot;tax&quot;" Drop="true" />
      </Sequence>
    </Parser>
    <Parser Name="toBe" >
      <Choice >
        <Token Ref="&quot;is&quot;" />
        <Token Ref="&quot;are&quot;" />
      </Choice>
    </Parser>
    <Parser Name="weekDays" >
      <Choice ActionText="function (a) {&#xA;  if (a) {&#xA;    return a[1];&#xA;  }&#xA;}" >
        <Reference Ref="weeks" />
        <Reference Ref="days" />
      </Choice>
    </Parser>
    <Parser Name="weeks" >
      <Token Ref="WEEKS" ActionText="function (a) {&#xA;  if (a) {&#xA;    return 5;&#xA;  }&#xA;}" />
    </Parser>
  </Parsers>
</VLL-Grammar>
