<?xml version="1.0"?>

<!-- *****************  Do not edit  ***************** -->
<!-- Generated by VisualLangLab (http://vll.java.net/) -->
<!-- *****************  Do not edit  ***************** -->
<VLL-Grammar>
  <Tokens>
    <Literal Name="&quot;,&quot;" Pattern="," />
    <Literal Name="&quot;:&quot;" Pattern=":" />
    <Literal Name="&quot;[&quot;" Pattern="[" />
    <Literal Name="&quot;]&quot;" Pattern="]" />
    <Literal Name="&quot;false&quot;" Pattern="false" />
    <Literal Name="&quot;null&quot;" Pattern="null" />
    <Literal Name="&quot;true&quot;" Pattern="true" />
    <Literal Name="&quot;{&quot;" Pattern="{" />
    <Literal Name="&quot;}&quot;" Pattern="}" />
    <Regex Name="floatingPointNumber" Pattern="\\-?(\\d+(\\.\\d*)?|\\d*\\.\\d+)([eE][+-]?\\d+)?[fFdD]?" />
    <Regex Name="stringLiteral" Pattern="\&quot;[^&quot;]*\&quot;" />
  </Tokens>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Parsers>
    <Parser Name="Value" >
      <Choice ErrMsg="illegal start of value" Description="The JSON alternative forms" >
        <Reference Ref="obj" />
        <Reference Ref="arr" />
        <Token Ref="stringLiteral" />
        <Token Ref="floatingPointNumber" />
        <Token Ref="&quot;null&quot;" />
        <Token Ref="&quot;true&quot;" />
        <Token Ref="&quot;false&quot;" />
      </Choice>
    </Parser>
    <Parser Name="arr" >
      <Sequence Description="A JSON array&apos;s structure " >
        <Token Ref="&quot;[&quot;" />
        <RepSep Mult="*" >
          <Reference Ref="Value" />
          <Token Ref="&quot;,&quot;" />
        </RepSep>
        <Token Ref="&quot;]&quot;" />
      </Sequence>
    </Parser>
    <Parser Name="member" >
      <Sequence Description="A JSON member&apos;s structure" >
        <Token Ref="stringLiteral" />
        <Token Ref="&quot;:&quot;" />
        <Reference Ref="Value" />
      </Sequence>
    </Parser>
    <Parser Name="obj" >
      <Sequence Description="A JSON object&apos;s structure" >
        <Token Ref="&quot;{&quot;" />
        <RepSep Mult="*" >
          <Reference Ref="member" />
          <Token Ref="&quot;,&quot;" />
        </RepSep>
        <Token Ref="&quot;}&quot;" />
      </Sequence>
    </Parser>
  </Parsers>
</VLL-Grammar>
